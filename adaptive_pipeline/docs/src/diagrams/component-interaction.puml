@startuml component-interaction
!define LIGHTBLUE #E3F2FD
!define BLUE #2196F3
!define DARKBLUE #1565C0
!define LIGHTGREEN #E8F5E9
!define GREEN #4CAF50

skinparam component {
    BackgroundColor LIGHTBLUE
    BorderColor BLUE
    ArrowColor DARKBLUE
}

skinparam database {
    BackgroundColor LIGHTGREEN
    BorderColor GREEN
}

title Component Interaction Diagram - Pipeline Processing

package "Presentation Layer" {
    component [CLI Interface] as CLI
    component [Config Manager] as Config
}

package "Application Layer" {
    component [ProcessFileUseCase] as ProcessUC
    component [RestoreFileUseCase] as RestoreUC
    component [Command Handler] as CmdHandler
}

package "Domain Layer" {
    component [Pipeline] as Pipeline
    component [PipelineStage] as Stage
    component [CompressionService] as CompSvc
    component [EncryptionService] as EncSvc
    component [ChecksumService] as CheckSvc
}

package "Infrastructure Layer" {
    component [BrotliAdapter] as Brotli
    component [ZstdAdapter] as Zstd
    component [AesGcmAdapter] as AES
    component [Sha256Adapter] as SHA
    component [PipelineRepository] as Repo
    component [BinaryFileWriter] as Writer
    component [BinaryFileReader] as Reader
    component [ChunkedFileReader] as ChunkReader
}

database "SQLite Database" as DB
storage "File System" as FS
storage ".adapipe Files" as AdapipeFS

' Layer interactions (top to bottom)
CLI --> CmdHandler : "Parse commands"
Config --> CmdHandler : "Provide config"

CmdHandler --> ProcessUC : "Execute processing"
CmdHandler --> RestoreUC : "Execute restoration"

ProcessUC --> Pipeline : "Configure pipeline"
ProcessUC --> CompSvc : "Compress data"
ProcessUC --> EncSvc : "Encrypt data"
ProcessUC --> CheckSvc : "Verify integrity"

RestoreUC --> Pipeline : "Get restore order"
RestoreUC --> CompSvc : "Decompress data"
RestoreUC --> EncSvc : "Decrypt data"
RestoreUC --> CheckSvc : "Verify integrity"

Pipeline *-- Stage : "Contains stages"

' Domain to Infrastructure (dependency inversion)
CompSvc ..> Brotli : "<<uses>>"
CompSvc ..> Zstd : "<<uses>>"
EncSvc ..> AES : "<<uses>>"
CheckSvc ..> SHA : "<<uses>>"

ProcessUC --> Repo : "Save metadata"
ProcessUC --> Writer : "Write .adapipe"
ProcessUC --> ChunkReader : "Read chunks"

RestoreUC --> Repo : "Retrieve metadata"
RestoreUC --> Reader : "Read .adapipe"

' Infrastructure to external systems
Repo --> DB : "Persist data"
Writer --> AdapipeFS : "Write files"
Reader --> AdapipeFS : "Read files"
ChunkReader --> FS : "Read input"

note right of Pipeline
  Aggregate root that enforces
  domain invariants:
  - Stage order uniqueness
  - Valid stage configurations
  - Compatible stage types
end note

note right of CompSvc
  Domain service defining
  compression/decompression
  contract without implementation
end note

note bottom of Repo
  Repository pattern isolates
  persistence from domain logic.
  Supports multiple implementations:
  - SQLite (production)
  - InMemory (testing)
end note

note left of CmdHandler
  Orchestrates use case
  execution and translates
  between CLI and application
  layer
end note

@enduml
