name: CI

on:
    pull_request:
        branches: [main]
    push:
        branches: [main]
    workflow_dispatch:

concurrency:
    group: ci-${{ github.ref }}
    cancel-in-progress: true

jobs:
    build-test:
        name: build & test
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: dtolnay/rust-toolchain@stable
            - uses: Swatinem/rust-cache@v2
            - run: cargo build --workspace --all-targets --locked
            - run: cargo test  --workspace --all-features --locked

    msrv:
        name: MSRV (1.87)
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: dtolnay/rust-toolchain@1.87
            - uses: Swatinem/rust-cache@v2
            - run: cargo build --workspace --lib --bins --locked

    fmt:
        name: fmt
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
            - uses: dtolnay/rust-toolchain@stable
            - run: rustup component add rustfmt

            # Auto-format code
            - name: Run rustfmt
              run: cargo fmt --all

            # Check if there are any changes
            - name: Check for formatting changes
              id: verify-changed-files
              run: |
                if git diff --quiet; then
                  echo "changed=false" >> $GITHUB_OUTPUT
                else
                  echo "changed=true" >> $GITHUB_OUTPUT
                fi

            # Commit and push if there are changes (only on push to main, not PRs)
            - name: Commit formatting changes
              if: steps.verify-changed-files.outputs.changed == 'true' && github.event_name == 'push'
              run: |
                git config user.name "github-actions[bot]"
                git config user.email "github-actions[bot]@users.noreply.github.com"
                git add -A
                git commit -m "chore: auto-format code with rustfmt [skip ci]"
                git push

            # Fail the job if formatting changes were needed on a PR
            - name: Fail if formatting needed on PR
              if: steps.verify-changed-files.outputs.changed == 'true' && github.event_name == 'pull_request'
              run: |
                echo "::error::Code formatting is required. Please run 'cargo fmt --all' locally and commit the changes."
                exit 1

    clippy:
        name: clippy
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: dtolnay/rust-toolchain@stable
              with:
                  components: clippy
            - uses: Swatinem/rust-cache@v2

            # Clippy strict on production code (lib/bins only - denies unwrap/expect/panic)
            # Tests are allowed to use unwrap/expect and are not checked here
            - name: Clippy (production code)
              run: cargo clippy --workspace --lib --bins --all-features -- -D warnings -D clippy::unwrap_used -D clippy::expect_used -D clippy::panic -D clippy::todo -D clippy::unimplemented

    semver-pipeline-domain:
        name: semver (adaptive-pipeline-domain)
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with: { fetch-depth: 0 }
            - name: Find last release tag for adaptive-pipeline-domain
              id: baseline
              run: |
                  echo "BASELINE_TAG=$(git describe --tags --match 'adaptive-pipeline-domain-v*' --abbrev=0 || echo '')" >> $GITHUB_ENV
            - name: No baseline? First release â€” skip check
              if: env.BASELINE_TAG == ''
              run: echo "No baseline tag found; skipping semver check."
            - name: cargo-semver-checks (against last tag)
              if: env.BASELINE_TAG != ''
              uses: obi1kenobi/cargo-semver-checks-action@v2
              with:
                  package: adaptive-pipeline-domain
                  baseline-revision: ${{ env.BASELINE_TAG }}
                  # derives required bump from Cargo.toml by default; override with "release-type" if needed
